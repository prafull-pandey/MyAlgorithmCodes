package com.pandey.script;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class ReadAndExecuteScript {
	private String scriptFilePath="";
	private File scriptFile;
	private Connection connection;
	private String lineTerminator=";";
	private int maxBatchSize=100;
	ReadAndExecuteScript(String filePath){
		this.scriptFilePath=filePath;
		scriptFile=new File(this.scriptFilePath);
		
	}
	Connection createConnection() {
		try {
			Class.forName("org.postgresql.Driver");
			connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
			connection.setAutoCommit(false);  
		} catch (ClassNotFoundException|SQLException e) {
			e.printStackTrace();
		} 
		return connection;
		 
	}
	void readScriptFileAndExecute(){
		try {
			BufferedReader reader=new BufferedReader(new FileReader(scriptFile));
			String line;
			Statement stmt=connection.createStatement();
			StringBuilder queryString=new StringBuilder("");
			int batchSize=0;
			while((line=reader.readLine())!=null) {
				if(line.trim().length()==0) {
					continue;
				}
				String[] lineArr=line.trim().split(lineTerminator);
				int i=0;
				while(i<lineArr.length-1) {
					
					queryString.append(lineArr[i].trim());
					stmt.addBatch(queryString.toString());
					batchSize++;
					queryString.setLength(0);
					if(batchSize>=maxBatchSize) {
						executeAllBatch(stmt);
					}
				}
				if(line.trim().endsWith(";")) {
					queryString.append(lineArr[i].trim());
					stmt.addBatch(queryString.toString());
					batchSize++;
					queryString.setLength(0);
					if(batchSize>=maxBatchSize) {
						executeAllBatch(stmt);
					}
				}else {
					queryString.append(lineArr[i].trim());
				}
			}
			
		}catch(IOException | SQLException e) {
			e.printStackTrace();
		}
	}
	private void executeAllBatch(Statement stmt) {
		// TODO Auto-generated method stub
		
	}
}
